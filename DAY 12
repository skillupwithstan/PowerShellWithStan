#function Get-SoftwareInfo
#{
    param(
    [Parameter(Mandatory=$true)] $hostnameFqdn # = "localhost"
    )

    $returnpackages = @()             
    $packages = Get-WmiObject -Class Win32_Product -ComputerName $hostnameFqdn | select-object name,version
    $returnpackages = $packages

    $sccm_client = gwmi -Namespace "root\ccm" -Class sms_client -ComputerName $hostnameFqdn -ErrorAction SilentlyContinue | select @{ n="name";e={"SCCM Client"}}, @{ n="version";e={$_.ClientVersion}}
    $returnpackages += $sccm_client # $a = $a + $b ==> $a += $b
    $returnpackages
#}
############################################################

$wmiOS = Get-WmiObject -Class Win32_OperatingSystem;
$OS = $wmiOS.caption;

#$OS = gwmi win32_operatingsystem | select Caption

$serviceStatus = Get-Service -Name "WinDefend" | Select status
#($serviceStatus).Status

#Write-Output "Windows Defender Status: ($serviceStatus).Status"

Write-Output "Windows Defender Status: $(($serviceStatus).Status)"

$status = @{"OS" = $OS; "Win Defender Status" = ($serviceStatus).Status}
[pscustomobject]$status

#############################################################
#Software Installation

param([String]$targetPath,
[String]$fileName,
[String]$proxyServer,
[String]$groupingTags)

$exePath=$targetPath+'\'+$fileName
#Start-Process -FilePath "C:\Program Files\Google\Chrome\Application\chrome.exe" -ArgumentList "http://www.google.com"
Start-Process -FilePath $exePath -ArgumentList "/install /quiet /norestart APP_PROXYNAME=$proxyServer APP_PROXYPORT=3128 GROUPING_TAGS=$groupingTags > C:\Temp\output_CrowdStrikeInstallation.txt"

<#
msiexec.exe [/i][/a][/j{u|m}][/x] <path_to_package>

/i  -->	Specifies normal installation.
/a  -->	Specifies administrative installation.
/ju -->	Advertise the product to the current user.
/jm	--> Advertise the product to all users.
/x	--> Uninstalls the package.
path_to_package -->	Specifies the location and name of the installation package file.
#>
#############################################
$user = 'Arockia' 
$str2 = ConvertTo-SecureString 'Password2!' -AsPlainText -Force
$pw = Read-Host "Enter the password" -AsSecureString

#Method - 1
param($password)

$pwd = $password | ConvertTo-SecureString -AsPlainText -Force | ConvertFrom-SecureString
$MyCredential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $user, ($pwd | ConvertTo-SecureString)

#Method - 2 

$pwd = "Password@123" | ConvertTo-SecureString -AsPlainText -Force | ConvertFrom-SecureString | Out-File pwd.txt
$MyCredential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $user, ( Get-Content pwd.txt | ConvertTo-SecureString)

gwmi -Class win32_operatingsystem -ComputerName server01 -Credential $MyCredential

##############################################################
#Basic excel operations

$Excel = New-Object -ComObject Excel.Application
$Excel.Visible=$true
$Excel1 = $Excel.Workbooks.Add()
$sheet = $Excel1.Worksheets.Item(1)
$sheet.Name = 'Service Details'
$row=1
$sheet.Cells.Item($row,1) = 'Service Name'
$sheet.Cells.Item($row,2) = 'Service Status'
$val= gsv
foreach($i in $val)
{
    $row=$row+1
    $sheet.Cells.Item($row,1) = $i.Name
    $sheet.Cells.Item($row,2) = $i.Status.ToString()
}

$Excel1.SaveAs("D:\ServiceDetails.xlsx")
$Excel.Quit()

###########################################################

#outlook - interoperability

$olFolders = “Microsoft.Office.Interop.Outlook.olDefaultFolders” -as [Type]
$outlook = New-Object -comobject outlook.application
$namespace = $outlook.GetNameSpace(“MAPI”)
$folder = $namespace.getDefaultFolder($olFolders::olFolderInBox)
#$folder = $namespace.getDefaultFolder($olFolders::olFolderSentMail)
$folder.items | Select-Object Subject, ReceivedTime, SenderName -First 5 | fl


###############################################################

$gsv_details = gsv

#To Send mail
#Option - 1 - Plain Text
$body = {
"Hello $name, `n Please find the service details. $gsv_details `n regards,"
}

#Option - 2 - HTML Text

$servername = Read-Host "Enter the server"
$osname = gwmi win32_operatingsystem | select caption


$body =  "<html>"
$body += "<head>"
$body += "<table>"
$body += "<tr> Server Name </tr>"
$body += "<td> $servername </td>"
$body += "<tr> OS Name </tr>"
$body += "<td> $osname </td>"
$body += "</table>"
$body += "</html>"

Send-MailMessage -To "kumar@gmail.com" -From "kumar@gmail.com" -Subject "Test Mail" -SmtpServer "mail.google.com" -Port 25 -Body $body -Credential $MyCredential -Attachments D:\serverlist.txt

###################################################

#API Management
#==============

# API - Application Programming Interface 
# SOAP (Simple Object Access Protocol) - Function-driven
# REST (Representational State Transfer) - Data-driven

Invoke-WebRequest -Uri "http:\\servicenow.com" -Credential (Get-Credential) -Method Get

$result = Invoke-WebRequest https://reqres.in/api/users?page=2 -Method Get
$result.content

$result1 = Invoke-RestMethod "https://reqres.in/api/users?page=2" -Method Get
$result1.data.email #| where {$_ -like "michael*"}

foreach($i in $result1.data)
{
    if($i.first_name -like "Michael*")
    {
       $i.email
    }
}

On Sun, Nov 13, 2022 at 6:24 PM arockian neopolean <neopoleankumar@gmail.com> wrote:
#Clean Temp folder

$cutoff = (Get-Date).AddDays(-30)  #(Get-Date) - (New-TimeSpan -Days 30) 

$before = (Get-ChildItem $env:temp | Measure-Object Length -Sum).Sum

Get-ChildItem | gm

Get-ChildItem $env:temp | Where-Object { $_.Length -ne $null } |
Where-Object { $_.LastWriteTime -lt $cutoff } |      
Remove-Item -Force -ErrorAction SilentlyContinue -Recurse

$after = (Get-ChildItem $env:temp | Measure-Object Length -Sum).Sum 

$freed = $before - $after

'Cleanup freed ' + ($freed/1MB)

###############################################

if(Test-Path "D:\serverlist.txt")
{
    Write-Debug "The input file is present"    
}
else
{
    Write-Host "File not found" -ForegroundColor Blue
    #Write-Error "File not found"
}

###############################################
#Server reachable check

$get_arr = "localhost",12345,"CH425132L" #Get-Content "D:\serverlist.txt"
#$ErrorActionPreference = Stop
$ping = ""
$nping = ""

foreach($s in $get_arr)
{
    try
    {
        Test-Connection $s -Count 1 -ErrorAction Stop
        $ping = $ping + $s + "`n"
        #try
        #{
        #    if()
        #    for()
        #    Test-Path C:\sfdsf -ErrorAction stop
        #}
        #catch
        #{
        #    if()
        #    for()
        #}
    }
    catch
    {
        #$_.Message

        $nping = $nping + $s + "`n"
    }
}

#@{'Pingable' = $ping ;'Unpingable' = $nping}

$ppt=[pscustomobject]@{
'Pingable' = $ping
'Unpingable' = $nping
}

$ppt | ft -Wrap  | Out-File "D:\output.txt"

###############################################

function Get-NotepadProcess { Get-Process notepad }

###############################################

function Get-DiskInventory
{
    <#
    .Synopsis   
        To get disk details
    .DESCRIPTION   
        Get server disk allocation
    .EXAMPLE
        Example of how to use this function 
    .EXAMPLE  
        Another example of how to use this function 
    .INPUTS   
        Inputs to this function (if any) 
    .OUTPUTS   
        Output from this function (if any) 
    .NOTES   
        General notes about Disk Data
    .COMPONENT   
        The component this function belongs to 
    .ROLE   
        The role this function belongs to 
    .FUNCTIONALITY   
        The functionality that best describes this function 
    #>

    #paramters - keyword
    param(
            $cname = 'localhost',
            [int]$dtype = 3
    )

    gwmi win32_logicaldisk -ComputerName $cname -filter "drivetype=$dtype" |
    sort DeviceID | select DeviceID, @{name='FreeSpace (MB)';expression={$_.Freespace / 1MB -as [int]}},
    @{name='Total Size (GB)';expression={$_.Size / 1GB  -as [int]}},
    @{name='%Free';expression={$_.Freespace / $_.Size * 100  -as [int]}}
}

#Calling a function
#Get-DiskInventory -cname server1 -dtype 3

###############################################

function Get-NamedService
{  
    param ($servicename)
    
    if ($servicename -eq $null)  
    {    
        Write-Host -ForegroundColor Red ‘Specify a service name!’    
        return 
    }
    else
    {
        "You have selected $servicename service"
         Get-Service $servicename
    }
  #  Get-Service $name
}


#To declare mandatory parameter in functions

function Test-EventLog
{  
    param  ([Parameter(Mandatory)] $logname)

    “You entered $logname.” 

    Get-EventLog -LogName $logname -Newest 5
}


#Positional Parameters
function Test-Function3
{  
    param  ([Parameter(Position=1)] [string[]]$ComputerName='localhost',
    [Parameter(Position=0)] $Type
    )

  “You entered $ComputerName, $Type.” 
}

#Cmdletbind Diff
function Test-Function 
{
    param  ( $MyParameter = "Hello") 

    Write-Host "$MyParameter"
}

function Test-Function1
{  
    [CmdletBinding()]  
    param  ( $MyParameter ) 

    Write-Host "$MyParameter"
}

function Test-Function 
{  
    [CmdletBinding()]  
    param  ( $MyParameter )

    Write-Verbose “Starting”  
    “You entered $MyParameter”  
    Write-Verbose “Ending” 
}


function Test-Pipeline 
{  
    param( [Parameter(ValueFromPipeline)]  $InputObject )

    process 
    {    
        “Working with $InputObject” 
    } 
}

############################


Error handling <--> Exception handling
--------------------------------------

try
{
 Test-Connection $servers -ErrorAction Stop  
 dsfdsg
 dsg
 $db.open() 
}
catch
{
    "this is not reachable"
}
finally
{
    $db.close()
}

dfgfdg

fdgfdg
fdg



function Get-Addition($a,$b)
{
    "Value - 1: $a"
    "Value - 2: $b"
    "Result: $($a + $b)"
    "Service Result: $(Get-service)"
    "Current User: $($env:USERNAME)"

    #$a+$b
    #get-service
}

Get-Addition -a 10 -b 20


Get-Help get-service -Full

comments

# - single line comments
<#
dfdsf
dsgfsd
dsg
dsg
dsg
#>


On Sun, Nov 6, 2022 at 6:51 PM arockian neopolean <neopoleankumar@gmail.com> wrote:
#regex

"Microsoft" –match "soft"
"Software" –match "soft"
"Computers" –match "soft"

"Software" –cmatch "soft"

"Shell" -match "\d"


\d - digit
\w - word

$message = 'there is an error with your file'
#1
$message -match 'error' 
#2
$message.contains('error')

$data = "General text without meaning",
       "my ssn is 123-45-6798",
       "some other string",
       "another SSN 123-12-34"

($data -match '\d\d\d-\d\d-\d\d\d') -and ($data -match "\w\w")

$inputdata = gc D:\ipconfig.txt

$inputdata -match "\d+.\d+.\d+.\d+"

$input = '192.168.1.20','192.168.1.21','192.168.1.22' -split ','
[or]
$input = '192.168.1.20','192.168.1.21','192.168.1.22'
$input.split(",")

$a= '192.168.1.22'
$a.Split('.')

############################################


$condition = $false
if ( $condition )
{
    Write-Output "The condition was true"
}
else
{
    Write-Output "The condition was false"
}

##########################################

[int] $userdata = Read-Host "Enter the number"
if ($userdata -eq 5)
{
    Write-Host "User Entered Value: $userdata is equal to 5."
}
elseif($userdata -lt 10)
{
   if($userdata -eq 8)
   {
        "The value is 8"
   }
   Write-Host "User Entered Value: $userdata is less than 10."
}
else
{
    Write-Host "User Entered Value: $userdata"
}

Write-Host "End of the script"

$a = 3
switch ($a) {
    1 {"It is one."}
    2 {"It is two."}
    3 {"It is three."}
    4 {"It is four."}
}

$servername = "xyz.apac.com"
$servers = $servername.Split(".")


$servername = Read-Host "enter the server fqdn"
$domain = $servername.Split(".")[1]

if($domain -eq "apac")
{
    "This is APAC server"
}
elseif ($domain -eq "emea")
{
    "This is a EMEA server"
}
else
{
    "This is a $domain server"
}

switch ($servername.Split(".")[1])
{
    "apac" 
    {
        Write-Host "APAC domain" 
    }
    "emea" 
    { 
        "EMEA Domain" 
    }
    default 
    { 
        $servername.Split(".")[1] 
    }
}


#Loop --> iteration --> for, foreach, while, do-while 


$i=0
$varray = 10,20,30,40
foreach ($val in $varray) {
  if ($val -eq 30) {
    break
  }
  $i++
}
Write-Host "30 was found in array index $i"

#=========
$ctr = 0
while ($ctr -lt 10)
{
    $ctr += 1  # $ctr++ ==> $ctr = $ctr + 1
    if ($ctr -eq 5)
    {
        continue
    }

    Write-Host $ctr
}

#===========================

$a = 1 

DO
{

 "Starting Loop $a"

 $a

 $a++

 "Now `$a is $a"

"variable `$a value is: `n" + $a

#`n --> new line

} While ($a -le 5)

#=============

$val = 2
while($val -ne 3)
{
    $val++
    Write-Host $val
}


$in = Read-Host "Enter the service name"

$b = $in.Split(",")
$b.Count

#Method:1
#We can use increment within the for loop itself.. ex: for($i=0;$i -lt $b.Count;$i++)
for($i=0;$i -lt $b.Count)  
{
    Get-Service -Name $b[$i]
    $i++  # $i = $i + 1
}

$service = winrm, spooler, agc 
            $i = 0    ,   1    , 2

$i = 0
$i < N
$i <= (N -1)
$i++

N = 3 (N-1)
$service[0]
$service[1]
$service[2] #N - 1

#ex: for($i=$b.Count -1;$i -ge 0 ;$i--)
for($i = $b.Count - 1; $i -ge 0)
{
    Get-Service $b[$i]
    $i-- # $i = $i - 1 
}

winrm, spooler (N-1)
0, 1

spooler, winrm, spooler
N = 3
0,1,2 (N-1)

$i = 2
$i = 1
$i = 0
$i = -1


foreach($i in $b) 
{
   gsv $i 
}


#Method:2
foreach($i in $b) 
{
    if($i -match "spooler")
    {
        break
    }

    gsv -Name $i
}

$input = "alping:v1","sha-256:asaadssdsddsdfdfdfd","12-03-2022"
$input1 = "alping:v1 sha-256:asaadssdsddsdfdfdfd 12-03-2022"

$input

$input1 = "alping:v1 sha-256:asaadssdsddsdfdfdfd 12-03-2022"
$input1.Split(" ")[1].Trim()

#======================================

#If condition & Foreach loop
$Computers = "localhost","CL425132L"

foreach($Computer in $Computers)
{
    $osname = Get-WmiObject Win32_OperatingSystem -ComputerName $Computer | Select Caption
    $osname

    if($osname -like "*Windows 10*")
    {
        Write-Host "OS Name of $Computer is:" $osname.Caption
        
    }
    elseif($osname -like "*Windows 2016*") 
    {
    
        "Windows 2016"
    }
    else
    {
        "Incorrect Name"
    }
}

#To validate email

$email = Read-Host "Enter your mail ID"

$x = New-Object System.Net.Mail.MailAddress($email)
$x.Address

[OR]

[System.Net.Mail.MailAddress] $email


#To validate IP Address

[ipaddress]"192.168.56.2500"


#================================================
#  To check OS Name from the listed/given servers
1. Input --> get the server names from user/file
2. os name
3. validate the os 
   it is Windows 2016 or Windows 2019 print "This is a Server OS"
   it is Windows 10 print "This is a client OS"
   none of the above print its "Unknown OS name: $osname" 

4. To export the os name and server name in csv file

Server name | OS name | Client/Server OS
server1 | microsoft windows 10 | Client OS


#================================================

$inputfile = "D:\serverlist.txt"

if(Test-Path $inputfile)
{
    if((Get-ChildItem $inputfile).Length -ne 0)
    {
        $server = Get-Content $inputfile
        
        foreach($s in $server)
        {
            if(Test-Connection $s -Quiet)
            {
                Write-Host "The server $s in reachable" -ForegroundColor Green

                $osname = gwmi win32_operatingsystem -ComputerName $s | select CSName, Caption
                if(($osname.Caption -like "*Windows 2016*") -or ($osname.Caption -like "*Windows 2019*"))
                {
                       "$s is a Server OS"
                }
                elseif(($osname.Caption -like "*Windows 10*") -or ($osname.Caption -like "*Windows 11*"))
                {
                       "$s is a Client OS"
                }
                else
                {
                    "$s is Unknown OS - $osname.Caption"
                }
            }
            else
            {
                Write-Host "The server $s is not reachable. Please check the connectivity!" -ForegroundColor Red
            }
        }
 
    }
    else
    {
        Write-Host "The server input file looks empty. Please add the server names." -ForegroundColor Red
    }
}
else
{
    Write-Host "The server list file is not present. Please check!!" -ForegroundColor Red
}







$ServerNames=Get-Content E:\Exercise\details.txt

foreach ($Servername in $ServerNames)
{
$OSName = Get-CimInstance win32_operatingsystem -ComputerName $ServerName | select csname,Caption

if($OSName.Caption -eq "Microsoft Windows 11 Pro")
{
Write-Host "The Server Name $ServerName is $OSName.Caption"
}
elseif ($OSName.Caption -like "*Windows 10*")
{

Write-Host "The Sevrer Name $ServerName is $OSName.Caption"
}
else
{
    Write-Host "The Operating System is unknown"
}
}













$sName=Get-Content C:\Temp\test.txt
foreach ($s in $sName)
{
if ($s -eq "server1")
{
break
}
$Details=Get-CimInstance win32_operatingsystem -ComputerName $s | select csname,Caption
#if($Details.Caption -eq "Microsoft Windows 11 Pro")
#{
if($Details.Caption -like "*server*")
{
Write-Host "System named "$Details.csname" installed with the server OS: "$details.Caption""
}
else
{
Write-Host "System named "$Details.csname" installed with the client OS: "$details.Caption""
}
#}
#else
#{
#Write-Host "System named "$Details.csname" installed with unknown OS"
}
}






$sName=Get-Content C:\Temp\test.txt
foreach ($s in $sName)
{
    #if ($s -eq "server1")
    #{
    #    break
    #}

    if(($s -ne "server1") -and ($s -ne "server2"))
    {
        $Details=Get-CimInstance win32_operatingsystem -ComputerName $s | select csname,Caption
        if($Details.Caption -eq "Microsoft Windows 11 Pro")
        {
            Write-Host "System named "$Details.csname" installed with the OS: Microsoft Windows 11 Pro"
        }
        else
        {
            Write-Host "System named "$Details.csname" installed with unknown OS"
        }
    }
}
#================================================



On Sun, Oct 30, 2022 at 6:45 PM arockian neopolean <neopoleankumar@gmail.com> wrote:
image.png

1. System defined/automatic variable 
2. user defined variable

#Variables & Quote Diff

$number = 10
$name = "Arockia"
$arockia = $true

$service = Get-Service
$service
$service.Name
[OR]
(Get-Service).Name
[OR]
Get-Service | select Name

========================================================================================
Data type --> integer (int32,int64),char,string,float (0.00),double, boolean ($true,$false)

int32 => -2147483648  to 2147483647
int64 => -9223372036854775808 to 9223372036854775807
========================================================================================

$i=1

[int]$port 
[char]$letter 
[string]$servername
[float]$no
[double]$num 


[int]$port1 = Read-Host "Enter the port number"

[int]$port = 80

[string]$b = "a"

$c = 'b'

[int]$i = 100

'Result = $i'
"Result = $i"


$a=“Kumar”
$a

$a | gm

$a.Length
$a.toupper()
$a.tolower()
$b = $a.replace(“Kumar”,”Raja”)

"The source value $a has been changed to $b"


#Objects & Data Types

$a = 1
$a.GetType()

$a = 1.87
$a.GetType().FullName

$a = 623876378232
$a.GetType().FullName

$a = ‘Hello’
$a.GetType().FullName

$a = Get-Date
$a.GetType().FullName 


$servicearr = Get-Service


$a = 3
[int[]]$array = 2,3,5,6
$array = 2,3,5,6, $false


Boolean --> True (1) | False (0)

$true
$false


#Arrays

$myArray = "Hello", 12, (Get-Date), $null, $true
$myArray.Count

$myArray[0] 
$myArray[1]
$myArray[-1]

$myArray = $myArray[0..2] # $myArray[0,1,2]
$myArray.Count 

$myArray += 'new element' #$myArray = $myArray + "New value"
$myArray.Count

#strongly-typed array
[Int[]]$myArray = 1,2,3
$myArray += 12 # += --> Shorthand operator

#To know the data type
$array1 = [Int[]](1,2,3,4,5),"Hi"
$array1.GetType()

$array1 += “Google”
$array1.GetType()


$array = 12,24,35,5,4

$array = @()

$array += "af"

Remove-Variable $array,$arockia


#Hash values

$person = @{}
$person

#Keys & Values

$person.Age = 23 
$person.Name = ‘Kumar’ 
$person.Status = ‘Online’ 

$person

#method:1
$person.Name
$person.Status

#method:2
$person[‘Age’] 

#method:3
$info = ‘Age’
$person.$info

$person.Keys.Count
$person.Values

#Using Ordered Hash Tables

$hash = @{Name=’Raja’; 
Age=60; 
Status=’Online’}
$hash

$hash = [ordered] @{Name=’Raja’; Age=60; Status=’Online’} 
$hash

$hash.Count

#Converting Hash Tables to PS Objects
#Method - 1

$hash = @{Name=’Raja’; Age=60; Status=’Online’} 
$hash.GetType()

$obj = New-Object PSObject -Property $hash
$obj
$obj.GetType()

#Method - 2

$data = @{ 
    LastName=’Kumar’
    FirstName=’Rajesh’
    Id=123 
    }

$data

$myObject = [PSCustomObject]$data 
$myObject
$myObject.GetType()

#Remove Keys from Hash Tables

$myHash = @{
Name = ‘Raja’ 
ID = 12 
Location = ‘Chennai’ 
}
$myHash

$myHash.Remove(‘Location’) 
$myHash


Server Name : $server
User Name   : $user


$apiresult = {
Incident Number : INC024324
}

$apiresult."Incident Number"
 

On Sat, Oct 29, 2022 at 6:48 PM arockian neopolean <neopoleankumar@gmail.com> wrote:
WMI - Windows Management Instrumentation (Get-WmiObject --> gwmi)
CIM - Common Information Model (Get-CimInstance --> gcim)

The repository that Common Information Model (CIM) and Windows Management Instrumentation (WMI) 
use is organized into namespaces. 
A namespace is a folder that groups related items for organizational purposes.

Namespaces contain classes.
classes contains properties & methods


root
 -- namespaces (cimV2)
      -- classes (Win32_OperatingSystem)
          -- properties (os name)
	  -- methods (reboot,shutdown)


# WMI CONCEPTS
===============

#To list all classes in cim namespace

Get-WmiObject -List -Namespace root\cimv2

(gwmi -List).count

#To list Namespaces

Get-WmiObject -Query “Select * from __Namespace” -Namespace Root | Select Name

Get-CimInstance -Namespace root -ClassName __Namespace


#To find classes
Get-WmiObject -Class *operating* -List

Get-WmiObject -Class *bios* -List

#To get OS related information

Get-WmiObject -Class Win32_OperatingSystem | select *

Get-WmiObject -ComputerName localhost,tst12,tst4 -Credential (Get-Credential) -Class Win32_OperatingSystem | select LastBootUpTime

Get-CimInstance -Class Win32_OperatingSystem | select LastBootUpTime,Status,Name

gwmi Win32_OperatingSystem | select LastBootuptime,status,name

Get-CimInstance -Class Win32_OperatingSystem | Get-Member



gwmi -Namespace root\cimv2 -Class win32_operatingsystem 


gwmi -Namespace root\securitycenter2 -List 

gwmi -Namespace root\securitycenter2 -Class *antivirus* -List


gwmi -Namespace root\securitycenter2 -Class AntiVirusProduct | select displayname



#To get installed software and it's version
gwmi win32_product | select Name,version

gwmi win32_product | gm

gwmi win32_product | where {$_.Name -match "PingID"} | select Name,Version,Vendor,ProductID

gwmi win32_product | where {$_.Name -like "Ping*"} | select *

gwmi win32_product|? {$_.Name -like "google*"}|select name,version,installdate

gcim -ClassName win32_product | ?{$_.Name -like "GOOGLE*"} | select -Property Name,version


#Get-CimInstance -Class win32_product | where {($_.name -Like "*ses*") -or ($_.name -like "*windows*")}


get-service


gcim win32_service | select Name,State

gsv | select Name,Status


#To get antivirus product
Get-WmiObject -Namespace root\SecurityCenter2 -List


Get-WmiObject -Namespace root\SecurityCenter2 -class "*antivirus*" -List


Get-WmiObject -Namespace root\SecurityCenter2 -Class AntivirusProduct | select *

gcim -Namespace root\SecurityCenter2 -Class AntivirusProduct | select DisplayName


#To get BIOS related info.

Get-WmiObject -Namespace root/cimv2 -Class Win32_BIOS

gcim win32_bios





Get-WmiObject Win32_BIOS -ComputerName ‘localhost’,'1234',’C425132L’ -ErrorAction Stop


#Get-WmiObject Win32_BIOS -ComputerName (Get-Content D:\TEST\serverinput.txt) 


$ErrorActionPreference = Stop
Get-WmiObject Win32_BIOS -ComputerName ‘localhost’,'1234',’C5132L’ -ErrorAction SilentlyContinue


Get-WmiObject Win32_BIOS -ComputerName ‘localhost’,'1234',’C25132L’ -ErrorAction Continue



Get-WmiObject Win32_LogicalDisk | ForEach-Object {  
    'Disk ' +$_.Caption +' has '+ ($_.FreeSpace / 1MB) +' MB space available’ }


Get-WmiObject Win32_LogicalDisk | ForEach-Object {  
    ‘Disk {0} has {1} MB space available’ -f $_.Caption, ($_.FreeSpace / 1MB) }


Get-CimInstance Win32_LogicalDisk -Filter "DriveType=3" | ForEach-Object {  
    "Disk {1} has {0:0.00} MB space available" -f ($_.FreeSpace / 1MB),$_.Caption 
    }


Get-CimInstance -ClassName Win32_OperatingSystem |   Select-Object  LastBoot* 

Get-WmiObject -Class Win32_OperatingSystem |   Select-Object  LastBoot* 


Get-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter ‘IPEnabled=true’ |  Select-Object -Property IPAddress
Get-CimInstance -Class Win32_NetworkAdapterConfiguration -Filter ‘IPEnabled=true’ |  Select-Object -ExpandProperty IPAddress


#To get member of class

Get-WmiObject win32_networkadapterconfiguration | Get-Member

gwmi win32_networkadapterconfiguration | where {$_.Description -like "BlueTooth*"}  | Invoke-WmiMethod -Name enabledhcp -WhatIf

gcim win32_networkadapterconfiguration |?{$_.Description -like "Hyper*"} | Invoke-CimMethod -Name enabledhcp -WhatIf


gwmi win32_operatingsystem -ComputerName ser1,ser2,ser3 -Credential $cred | Invoke-WmiMethod Reboot





[WMI]'Win32_Logicaldisk="C:"'

gwmi Win32_Logicaldisk -Filter "DeviceID = 'C:'"

[WMI]'Win32_Service.Name="winRM"'

gwmi Win32_Service | where {$_.Name -eq "winRM"}

gwmi win32_operatingsystem -ComputerName server1,server2,server3 -Credential (Get-Credential) | select BuildNumber,Version

----------------------------------------------------------------------------

On Sat, Oct 22, 2022 at 6:23 PM arockian neopolean <neopoleankumar@gmail.com> wrote:
13344545 / 1GB                                                                                              
13344545 / 1GB -as [int]                                                                                      
13344545 / 1GB -as [float]  
[math]::Round(100.5080)
                                                                                               
[math]::Round(342425425/1GB,4)                                                                                
[math]::Round(342425425/1GB,2)

#:: --> scope resolution operator

class Math
{
    class Road: Travel
    {
        Round();
        ticketno = 100;
    }
    class Sky: Travel
    {
        Flight_Operation();
        flightno;
    }
    class track: Travel
    {

    }
}



Get-Process | Sort-Object PM | select Name,@{name="PM (GB)";expression={$_.PM/1GB}} -Last 10                  

Get-Process | Sort-Object PM | select Name,@{name="PM (GB)";expression={$_.PM/1GB -as [int]}} -Last 10 
       
Get-Process | Sort-Object PM | select Name,@{name="PM (GB)";expression={$_.PM/1GB -as [float]}} -Last 10

Get-Process | Sort-Object PM | select Name,@{name="PM (GB)";expression={[math]::Round($_.PM/1GB,2)}} -Last 10 

Get-Process | sort PM | select Name,PM -Last 10


"a","b","c","a","a","a" | Select-Object -Unique

"a","b","c","a","a","a" | Select-Object -Unique -First 2

"a","b","c","a","a","a" | Select-Object -First 2 -Unique



#Getting Weekdays and Current Month

Get-Date -Format 'M'
Get-Date -Format 'MM'
Get-Date -Format 'MMM' 
Get-Date -Format 'MMMM'

<#
Day - d 
Month - M 
Year - y 
Hour (12hr) - h 
Hour (24hr) - H 
Minute - m 
Second - s
#>

get-date -Format "yyyy-MM-dd HH:mm"

Get-Date | Get-Member

(get-date).Month

(Get-Date).AddDays(20).ToShortDateString()
(Get-Date).AddDays(-20)

(Get-Date).AddHours(-12)
(Get-Date).AddHours(24)

(get-date).Day
(get-date).ToUniversalTime()

(Get-Date).ToShortDateString()
(Get-Date).ToShortTimeString()


Get-EventLog -LogName System -EntryType Error -After (Get-Date).AddHours(-12)




#Read 

Read-Host "Enter the server name"

$a = Read-Host "Enter the server name"
$a 


$b = hostname

$b | Out-File





[void] [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')

$cn=[Microsoft.VisualBasic.Interaction]::InputBox('Enter Computer Name:')
$cn 

[Microsoft.VisualBasic.Interaction]::MsgBox("")

$cn=[Microsoft.VisualBasic.Interaction]::InputBox('Enter Computer Name:','Computer Name','server123')
$cn



#Write-Host does not accept pipeline
Write-Host "Hello"
Write-Host "Hello" -NoNewline
Write-Host "Hello" -ForegroundColor Green -BackgroundColor Red 

#It accepts pipeline
Write-Host "Hello" | where {$_.length -gt 5}

Write-Output "Hello" | where {$_.length -gt 5} 

Write-Warning ‘Almost done...’ 


On Sun, Oct 16, 2022 at 6:38 PM arockian neopolean <neopoleankumar@gmail.com> wrote:
#CAR --> OBJECT

#PROPERTIES --> COLOR, TYRES
#METHODS --> BREAK, START, STOP

#Get-Member --> To fetch the properties and methods of a variable/object/command

#Format-Table --> ft
#Format-List --> fl
#Format-wide --> fw


#sorting --> sort-object (sort)
#selecting --> select-object (select)
#conditioning --> where-object (where, ?)

Stop-Process -Name notepad

Get-Process -Name notepad | Stop-Process -WhatIf

Get-Service | Stop-Service -Confirm
 
Get-Process notepad,powershell_ise

help Get-Process

Get-Service | Get-Member

Get-Printer | gm

Get-Service -Name ALG


Get-Service | Select-Object Name, Status


(gsv).Name

1. (Get-Service -Name WinRM,ALG).Stop()

2. Stop-Service ALG 

3. Get-Service winrm | Stop-Service

#FORMATTING, SORTING, SELECT & WHERE OBJECT
#==========================================

#Format
Get-Service | Format-Table -Wrap -AutoSize

Get-Process | Format-List

Get-Service | Format-Wide

#Sorting

Get-Service | Sort -Property Status | Out-GridView

Get-Process | sort-object VM -Descending | select Name,VM -First 10

Get-Process | Sort VM | select Name,VM -Last 10





#Select - select perticular field/property

Get-Service | Select-Object Name,Status,StartType

gsv | select *

# Need to extract Id, message from Application/System Events - latest 10 - Information/Error

Get-EventLog System -Newest 10 | select TimeGenerated, InstanceId, message | ft -Wrap -AutoSize


#custom property
@{n="Process Name"; e={$_.Name}}

#Syntax: @{name="";expression={}}



#name - n, na
#expression - e, exp, ex

@{name = "user defined name" ; expression = { $_.Name }}
@{name = "VM (GB)" ; expression = { $_.VM / 1GB }}

Get-Service | Select-Object Name,Status
Get-Service | Select-Object @{name="Service Name";expression={$_.Name}},Status

Get-Process | Sort-Object PM | select Name,@{name="PM (GB)";expression={$_.PM/1GB}} -Last 10

Get-Process | Sort-Object VM -Descending| select Name,@{name="VM (MB)";expression={$_.VM/1MB -as [int]}} -First 10


#Get-Service | sort @{name="Service Status";expression={$_.Status}}

Get-EventLog -LogName Application -Newest 10 | select Message |  Out-GridView


#Where - to apply condition

Get-Service | where {$_}

Get-Service | Where-Object {$_.Status -match "Stopped"} | select Name,Status

Get-Service | where {$_.Status -cmatch "Stopped"}

Get-Process | ? {$_.Name -like "powershell*"} | select -Property ProcessName


Get-EventLog System -Newest 10 | 
select TimeGenerated, InstanceId,@{Name="Event Message";Expression={$_.message}},EntryType |
where {$_.EntryType -match "Warning"}

Get-EventLog System -Newest 10 | 
where {$_.EntryType -match "Warning"} |
select TimeGenerated, InstanceId,@{Name="Event Message";Expression={$_.message}}

On Sat, Oct 15, 2022 at 6:46 PM arockian neopolean <neopoleankumar@gmail.com> wrote:
help service

help Get-Service

help alias


Get-Alias

Get-Alias -Definition Where-Object


Get-Alias -Definition Get-Service
New-Alias -Name abc -Value Get-Service
Import-Alias 
Export-Alias

Get-Command -Noun service

Get-Command -Verb stop


GET-SERVICE
get-service 
GET-service 
gET-Service


help Get-Service

help Get-ChildItem

help Get-EventLog

help eventlog

Get-Service -Name winrm

Get-Service winrm

Get-ChildItem 

gsv -ComputerName localhost winrm

Get-EventLog -LogName Security -Newest 10

Get-Service -Name ALG

get-service | ?{$_.Status -eq "Stopped"}

gwmi win32_bios -co localhost

Get-Service -co localhost

(Get-Service).count

(Get-Service).Name

(Get-Service).Start()

Start-Service -Name winrm 


#####################################

Get-PSProvider

Get-PSDrive

Stop-Service -Name WinDefend -WhatIf

Stop-Service -Name WinDefend -Confirm


######################################

#File system handling

help item
help New-Item

Get-ChildItem -Path D:

ls --> Get-ChildItem
mv --> Move-item
cp -> Copy-item


New-Item -Path "D:\TEST PS" -ItemType Directory

New-Item -Path 'D:\TEST PS\123.txt' #-ItemType File











Rename-Item 'D:\TEST PS' 'D:\Patching' -Force

Rename-Item 'D:\Patching\123.txt' 'D:\Patching\precheck.txt'



"This is a second line" | Set-Content D:\Patching\precheck.txt 

"This is a third line" | Add-Content D:\Patching\precheck.txt


Remove-Item D:\Patching\precheck.txt -Recurse

Get-ChildItem D:\ -Recurse


Get-Service | Format-Table -Wrap | Out-File D:\Patching\Precheck.txt 


Get-Service | Out-File D:\Patching\precheck.txt 


Get-Content D:\Patching\Precheck.txt

(Get-Content D:\Patching\precheck.txt).Length



get-service | Export-Csv D:\Patching\Precheck.csv -Append

gsv |ft -Wrap | Out-File D:\Patching\Postcheck.txt  

#Compare-Object
 
compare (Get-Content D:\Patching\Precheck.txt) (gc D:\Patching\Postcheck.txt) | Out-File D:\Patching\result.txt

#Get-Service | ConvertTo-Html | Out-File D:\Patching\test.html

Get-Service | Out-GridView



15/10/2022
==========
1. Comments in powershell

# --> Single line comment

<#
Description: AD User Account Creation
Purpose: To add list of users into AD OU group
Author: Arockia Neopolean
Date : 15/10/2022 - Initial Document
#>

2. Help System

Verb-Noun

Update-Help

help service

help Get-Service 
help Get-Service -Full

help Get-Service -Examples

help Get-Service -Online

Get-Service -ComputerName localhost

Get-Service -ComputerName localhost -Name AJRouter

Get-Help 

Get-Alias

help Get-EventLog

#Type parameters - THREE

1. Mandatory Params -->  [-LogName] <string>
Ex: Get-EventLog -LogName Application -Newest 10
2. Positional Params --> [[-Name] <string[]>]
3. Optional Params --> [-ComputerName <string[]>]

Get-EventLog System -Newest 10        #| ?{$_.Message -contains "can't be found"}

Get-Service -Name ALG

Get-Service ALG

(Get-Alias).count 

Get-Alias -Definition Get-Service

Get-Alias -Name gsv

New-Alias -Name abc -Value Get-Service

Export-Alias D:\aliases.txt

Import-Alias D:\alias.txt

FS --> Files & Folders
======================

cd <path> --> Set-Location <path>
pwd <path> --> Get-Location <path>
ls <path>  --> Get-ChildItem <path>

.txt, .log --> Content Read --> Get-Content
.txt, .log --> Content Write --> Out-File (By default override) (use -Append to append the content)

.csv --> Reading a content from CSV file --> Import-Csv D:\Patching\Precheck.csv 
.csv --> Writing a content to CSV file --> Export-Csv  D:\Patching\Precheck.csv 

.xml --> Export-Clixml, Import-Clixml
