#regex

"Microsoft" –match "soft"
"Software" –match "soft"
"Computers" –match "soft"

"Software" –cmatch "soft"

"Shell" -match "\d"


\d - digit
\w - word

$message = 'there is an error with your file'
#1
$message -match 'error' 
#2
$message.contains('error')

$data = "General text without meaning",
       "my ssn is 123-45-6798",
       "some other string",
       "another SSN 123-12-34"

($data -match '\d\d\d-\d\d-\d\d\d') -and ($data -match "\w\w")

$inputdata = gc D:\ipconfig.txt

$inputdata -match "\d+.\d+.\d+.\d+"

$input = '192.168.1.20','192.168.1.21','192.168.1.22' -split ','
[or]
$input = '192.168.1.20','192.168.1.21','192.168.1.22'
$input.split(",")

$a= '192.168.1.22'
$a.Split('.')

############################################


$condition = $false
if ( $condition )
{
    Write-Output "The condition was true"
}
else
{
    Write-Output "The condition was false"
}

##########################################

[int] $userdata = Read-Host "Enter the number"
if ($userdata -eq 5)
{
    Write-Host "User Entered Value: $userdata is equal to 5."
}
elseif($userdata -lt 10)
{
   if($userdata -eq 8)
   {
        "The value is 8"
   }
   Write-Host "User Entered Value: $userdata is less than 10."
}
else
{
    Write-Host "User Entered Value: $userdata"
}

Write-Host "End of the script"

$a = 3
switch ($a) {
    1 {"It is one."}
    2 {"It is two."}
    3 {"It is three."}
    4 {"It is four."}
}

$servername = "xyz.apac.com"
$servers = $servername.Split(".")


$servername = Read-Host "enter the server fqdn"
$domain = $servername.Split(".")[1]

if($domain -eq "apac")
{
    "This is APAC server"
}
elseif ($domain -eq "emea")
{
    "This is a EMEA server"
}
else
{
    "This is a $domain server"
}

switch ($servername.Split(".")[1])
{
    "apac" 
    {
        Write-Host "APAC domain" 
    }
    "emea" 
    { 
        "EMEA Domain" 
    }
    default 
    { 
        $servername.Split(".")[1] 
    }
}


#Loop --> iteration --> for, foreach, while, do-while 


$i=0
$varray = 10,20,30,40
foreach ($val in $varray) {
  if ($val -eq 30) {
    break
  }
  $i++
}
Write-Host "30 was found in array index $i"

#=========
$ctr = 0
while ($ctr -lt 10)
{
    $ctr += 1  # $ctr++ ==> $ctr = $ctr + 1
    if ($ctr -eq 5)
    {
        continue
    }

    Write-Host $ctr
}

#===========================

$a = 1 

DO
{

 "Starting Loop $a"

 $a

 $a++

 "Now `$a is $a"

"variable `$a value is: `n" + $a

#`n --> new line

} While ($a -le 5)

#=============

$val = 2
while($val -ne 3)
{
    $val++
    Write-Host $val
}


$in = Read-Host "Enter the service name"

$b = $in.Split(",")
$b.Count

#Method:1
#We can use increment within the for loop itself.. ex: for($i=0;$i -lt $b.Count;$i++)
for($i=0;$i -lt $b.Count)  
{
    Get-Service -Name $b[$i]
    $i++  # $i = $i + 1
}

$service = winrm, spooler, agc 
            $i = 0    ,   1    , 2

$i = 0
$i < N
$i <= (N -1)
$i++

N = 3 (N-1)
$service[0]
$service[1]
$service[2] #N - 1

#ex: for($i=$b.Count -1;$i -ge 0 ;$i--)
for($i = $b.Count - 1; $i -ge 0)
{
    Get-Service $b[$i]
    $i-- # $i = $i - 1 
}

winrm, spooler (N-1)
0, 1

spooler, winrm, spooler
N = 3
0,1,2 (N-1)

$i = 2
$i = 1
$i = 0
$i = -1


foreach($i in $b) 
{
   gsv $i 
}


#Method:2
foreach($i in $b) 
{
    if($i -match "spooler")
    {
        break
    }

    gsv -Name $i
}

$input = "alping:v1","sha-256:asaadssdsddsdfdfdfd","12-03-2022"
$input1 = "alping:v1 sha-256:asaadssdsddsdfdfdfd 12-03-2022"

$input

$input1 = "alping:v1 sha-256:asaadssdsddsdfdfdfd 12-03-2022"
$input1.Split(" ")[1].Trim()

#======================================

#If condition & Foreach loop
$Computers = "localhost","12.4.5.2"

foreach($Computer in $Computers)
{
    $osname = Get-WmiObject Win32_OperatingSystem -ComputerName $Computer | Select Caption
    $osname

    if($osname -like "*Windows 10*")
    {
        Write-Host "OS Name of $Computer is:" $osname.Caption
        
    }
    elseif($osname -like "*Windows 2016*") 
    {
    
        "Windows 2016"
    }
    else
    {
        "Incorrect Name"
    }
}

#To validate email

$email = Read-Host "Enter your mail ID"

$x = New-Object System.Net.Mail.MailAddress($email)
$x.Address

[OR]

[System.Net.Mail.MailAddress] $email


#To validate IP Address

[ipaddress]"192.168.56.2500"


#================================================
#  To check OS Name from the listed/given servers
1. Input --> get the server names from user/file
2. os name
3. validate the os 
   it is Windows 2016 or Windows 2019 print "This is a Server OS"
   it is Windows 10 print "This is a client OS"
   none of the above print its "Unknown OS name: $osname" 

4. To export the os name and server name in csv file

Server name | OS name | Client/Server OS
server1 | microsoft windows 10 | Client OS


#================================================

$inputfile = "D:\serverlist.txt"

if(Test-Path $inputfile)
{
    if((Get-ChildItem $inputfile).Length -ne 0)
    {
        $server = Get-Content $inputfile
        
        foreach($s in $server)
        {
            if(Test-Connection $s -Quiet)
            {
                Write-Host "The server $s in reachable" -ForegroundColor Green

                $osname = gwmi win32_operatingsystem -ComputerName $s | select CSName, Caption
                if(($osname.Caption -like "*Windows 2016*") -or ($osname.Caption -like "*Windows 2019*"))
                {
                       "$s is a Server OS"
                }
                elseif(($osname.Caption -like "*Windows 10*") -or ($osname.Caption -like "*Windows 11*"))
                {
                       "$s is a Client OS"
                }
                else
                {
                    "$s is Unknown OS - $osname.Caption"
                }
            }
            else
            {
                Write-Host "The server $s is not reachable. Please check the connectivity!" -ForegroundColor Red
            }
        }
 
    }
    else
    {
        Write-Host "The server input file looks empty. Please add the server names." -ForegroundColor Red
    }
}
else
{
    Write-Host "The server list file is not present. Please check!!" -ForegroundColor Red
}


$ServerNames=Get-Content E:\Exercise\details.txt

foreach ($Servername in $ServerNames)
{
$OSName = Get-CimInstance win32_operatingsystem -ComputerName $ServerName | select csname,Caption

if($OSName.Caption -eq "Microsoft Windows 11 Pro")
{
Write-Host "The Server Name $ServerName is $OSName.Caption"
}
elseif ($OSName.Caption -like "*Windows 10*")
{

Write-Host "The Sevrer Name $ServerName is $OSName.Caption"
}
else
{
    Write-Host "The Operating System is unknown"
}
}



$sName=Get-Content C:\Temp\test.txt
foreach ($s in $sName)
{
if ($s -eq "server1")
{
break
}
$Details=Get-CimInstance win32_operatingsystem -ComputerName $s | select csname,Caption
#if($Details.Caption -eq "Microsoft Windows 11 Pro")
#{
if($Details.Caption -like "*server*")
{
Write-Host "System named "$Details.csname" installed with the server OS: "$details.Caption""
}
else
{
Write-Host "System named "$Details.csname" installed with the client OS: "$details.Caption""
}
#}
#else
#{
#Write-Host "System named "$Details.csname" installed with unknown OS"
}
}


$sName=Get-Content C:\Temp\test.txt
foreach ($s in $sName)
{
    #if ($s -eq "server1")
    #{
    #    break
    #}

    if(($s -ne "server1") -and ($s -ne "server2"))
    {
        $Details=Get-CimInstance win32_operatingsystem -ComputerName $s | select csname,Caption
        if($Details.Caption -eq "Microsoft Windows 11 Pro")
        {
            Write-Host "System named "$Details.csname" installed with the OS: Microsoft Windows 11 Pro"
        }
        else
        {
            Write-Host "System named "$Details.csname" installed with unknown OS"
        }
    }
}
#================================================
